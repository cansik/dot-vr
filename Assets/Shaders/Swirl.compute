#pragma kernel Main

#include "HLSLSupport.cginc"
#include "../Plugins/Pcx/Shaders/Common.cginc"

StructuredBuffer<float4> SourceBuffer;
RWStructuredBuffer<float4> OutputBuffer;

CBUFFER_START(Params)
    float Time;
	float4 Color;
	float4 ActiveColor;
	float4 Actor;
	float MinDistance;
	bool ReColorCloud;
CBUFFER_END

[numthreads(128, 1, 1)]
void Main(uint id : SV_DispatchThreadID)
{
    float4 pt = SourceBuffer[id];
    half3 c = PcxDecodeColor(asuint(pt.w));

	float3 direction = pt.xyz - Actor.xyz;
	float d = abs(length(direction));
	float nd = min(1.0, max(1.0 - d / MinDistance, 0));

	// lerp correctly between colors
	if(ReColorCloud)
	{
		c = lerp(Color, ActiveColor, nd);
	}

	// moving
	if(d < MinDistance)
	{
		pt.xyz += (normalize(direction.xyz) * nd);
		//pt.z += sin(0.23 - Time * 1.13);
	}

    pt.w = asfloat(PcxEncodeColor(c));
    OutputBuffer[id] = pt;
}
